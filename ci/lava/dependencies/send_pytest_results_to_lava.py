#!/usr/bin/env python3

# Copyright (c) 2019, Arm Limited and Contributors. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

"""Scrape pytest output and output LAVA signal strings."""

import argparse
import os
import re
import sys


def setup_parser():
    """Create command line parser.

    :return: parser object.

    """
    parser = argparse.ArgumentParser(description="Send Pytest Results To LAVA")
    parser.add_argument(
        "--input",
        type=str,
        default="./results.txt",
        help="Results file generated by pytest",
    )
    return parser


def main():
    """Perform the main execution."""
    # Parse command line
    options = setup_parser().parse_args()

    # results store
    results = []

    # setup regular expressions for PASSED and FAILED
    pass_re = re.compile(".*::.*::.*PASSED")
    fail_re = re.compile(".*::.*::.*FAILED")

    lava_signal = "<LAVA_SIGNAL_TESTCASE TEST_CASE_ID="
    pass_str = " RESULT=PASS>"
    fail_str = " RESULT=FAIL>"

    # Look for the results file and process it if it exists
    if os.path.isfile(options.input):
        with open(options.input) as file:
            for line in file:
                if pass_re.search(line):
                    name = line.split("::", 1)[1].split(" ")[0]
                    results.append(
                        "{} {} {}".format(lava_signal, name, pass_str)
                    )
                elif fail_re.search(line):
                    name = line.split("::", 1)[1].split(" ")[0]
                    results.append(
                        "{} {} {}".format(lava_signal, name, fail_str)
                    )
    else:
        print("Input File not found")

    for result in results:
        print(result)


if __name__ == "__main__":
    sys.exit(main())
