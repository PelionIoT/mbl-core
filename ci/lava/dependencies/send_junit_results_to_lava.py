#!/usr/bin/env python3

# Copyright (c) 2019, Arm Limited and Contributors. All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

"""Parse junit output and output LAVA signal strings."""

import argparse
import os
import re
import sys
from junitparser import JUnitXml, Skipped, Failure, Error


def setup_parser():
    """Create command line parser.

    :return: parser object.

    """
    parser = argparse.ArgumentParser(description="Send Pytest Results To LAVA")
    parser.add_argument(
        "input",
        type=str,
        default="./results.txt",
        help="Results file generated by pytest",
    )
    return parser


def format_result(suite, case, result):
    """Process a Line of results data and turn it into LAVA speak.

    :return: string containing the LAVA formatted result

    """
    return "<LAVA_SIGNAL_TESTCASE TEST_CASE_ID={}::{} RESULT={}>".format(
        suite, case, result
    )


def create_lava_output_text(testcase):
    """Process a Line of results data and turn it into LAVA speak.

    :return: string containing the LAVA formatted result

    """
    name = testcase.classname.split(".")[-1]

    # In the junit xml file format, tests that "pass" contain no message to
    # indicate this. In order to differentiate between a pass and the various
    # failure cases we check the presence of the result first.
    # For the failure cases, skipped tests are marked accordingly.
    # Everything else is a fail.

    if testcase.result is None:
        result = "pass"
    elif isinstance(testcase.result, Skipped):
        result = "skip"
    elif isinstance(testcase.result, (Failure, Error)):
        result = "fail"
    else:
        result = "fail"

    return format_result(name, testcase.name.replace(" ", "_"), result)


def main():
    """Perform the main execution."""
    # Parse command line
    options = setup_parser().parse_args()

    results = []

    # Look for the xml file and process it if it exists
    if os.path.isfile(options.input):
        rootElement = JUnitXml.fromfile(options.input)

        # Depending on the structure of the xml. rootElement will be one of:
        #    testsuite - where there is a testsuites definiton
        #    testcase  - where there is no testsuites definition
        # The important information is in the testcase elements. Everything
        # else can be skipped

        myiter = iter(rootElement)

        for item in myiter:
            if item._tag == "testsuite":
                # So iterate the testcases inside the testsuite
                myIter2 = iter(item)
                for case in myIter2:
                    results.append(create_lava_output_text(case))
            else:
                # Iterate the tescases directly
                results.append(create_lava_output_text(item))
    else:
        print("Input File not found")

    if len(results) == 0:
        print(format_result("NoResultsFound", "NoResultsFound", "skip"))
    else:
        for result in results:
            print(result)


if __name__ == "__main__":
    sys.exit(main())
